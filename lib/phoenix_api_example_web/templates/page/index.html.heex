<form id="person-form">
  <div>
    <label for="first-name">First Name</label>
    <input type="text" id="first-name" name="first-name" required>
  </div>

  <div>
    <label for="last-name">Last Name</label>
    <input type="text" id="last-name" name="last-name" required>
  </div>

  <div>
    <label for="email">Email</label>
    <input type="email" id="email" name="email" required>
  </div>

  <button>Submit</button>
</form>

<script>
  // Add a handler for the form's "submit" event
  document.getElementById("person-form").addEventListener("submit", (event) => {
    // The default behavior of form submission is to navigate, but since we're taking care of everything client-side let's prevent that
    event.preventDefault();

    const formElement = event.target;

    fetch("/api/people", {
      method: "POST",
      headers: {
        "content-type": "application/json",
      },
      body: JSON.stringify({
        person: {
          first_name: formElement.elements["first-name"].value,
          last_name: formElement.elements["last-name"].value,
          email: formElement.elements["email"].value,
        }
      })
    }).then((response) => {
      if (!response.ok) {
        throw new Error(`Bad request: ${response.status} ${response.statusText}`);
      }

      return response.json();
    }).then((responsePayload) => {
      alert("Successfully created person");

      // Note the person object is nested under the `data` property
      console.log(responsePayload.data);

      // TODO: Now what? Should we navigate the user away from the form?
      // Should we reset the form and let them continue to create another user?

      formElement.reset();
    }).catch((error) => {
      alert("ERROR creating person");

      console.log(error);
    });
  });
</script>
